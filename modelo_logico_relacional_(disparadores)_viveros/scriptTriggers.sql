-- MySQL Script generated by MySQL Workbench
-- Sun Oct 31 11:13:42 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb  FUNCIONA
-- -----------------------------------------------------
DROP DATABASE IF EXISTS dbviveros;

CREATE DATABASE dbviveros;
\c dbviveros


-- -----------------------------------------------------
-- Table VIVEROS    FUNCIONA
-- -----------------------------------------------------
DROP TABLE IF EXISTS VIVEROS CASCADE;

CREATE TABLE IF NOT EXISTS VIVEROS (
          Coordenadas_Geograficas FLOAT NOT NULL,
          Nombre VARCHAR(30) NOT NULL,
          Superficie VARCHAR(20) NOT NULL,
          PRIMARY KEY (Coordenadas_Geograficas),
          UNIQUE (Nombre));

-- -----------------------------------------------------
-- Table prueba.ZONAS   FUNCIONA
-- -----------------------------------------------------
DROP TABLE IF EXISTS ZONAS CASCADE;

CREATE TABLE IF NOT EXISTS ZONAS (
          Coordenadas_Geograficas FLOAT NOT NULL,
          Nombre VARCHAR(30) NOT NULL,
          PRIMARY KEY (Nombre),
          UNIQUE (Coordenadas_Geograficas),
          CONSTRAINT fk_ZONAS_VIVEROS
          FOREIGN KEY (Coordenadas_Geograficas)
            REFERENCES VIVEROS (Coordenadas_Geograficas)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table prueba.EMPLEADOS
-- -----------------------------------------------------
DROP TABLE IF EXISTS EMPLEADOS CASCADE;

CREATE TABLE IF NOT EXISTS EMPLEADOS (
          DNI INT NOT NULL,
          Nombre VARCHAR(45) NOT NULL,
          Sueldo FLOAT NOT NULL,
          Direccion VARCHAR(45) NOT NULL,
          Vacaciones_anuales INT,
          PRIMARY KEY (DNI),
          UNIQUE (Nombre));



-- -----------------------------------------------------
-- Table prueba.CLIENTES_PLUS  FUNCIONA
-- -----------------------------------------------------
DROP TABLE IF EXISTS CLIENTES_PLUS CASCADE;

CREATE TABLE IF NOT EXISTS CLIENTES_PLUS (
          DNI INT NOT NULL,
          Nombre VARCHAR(30),
          Apellidos VARCHAR(45),
          Total_Mensual FLOAT NULL,
          Bonificacion FLOAT NULL,
          EMPLEADOS_DNI INT NOT NULL,
          Email VARCHAR(45),
          CONSTRAINT email CHECK (Email ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
          PRIMARY KEY (DNI),
          CONSTRAINT fk_CLIENTES_PLUS_EMPLEADOS1
            FOREIGN KEY (EMPLEADOS_DNI)
            REFERENCES EMPLEADOS (DNI)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table prueba.PRODUCTOS
-- -----------------------------------------------------
DROP TABLE IF EXISTS PRODUCTOS CASCADE;

CREATE TABLE IF NOT EXISTS PRODUCTOS (
          Codigo_Producto INT NOT NULL,
          Nombre VARCHAR(45) NOT NULL,
          Precio FLOAT NOT NULL,
          Stock INT NULL,
          CONSTRAINT stock CHECK (Stock >= 0),
          PRIMARY KEY (Codigo_Producto));


-- -----------------------------------------------------
-- Table prueba.CLIENTES PLUS_PRODUCTOS
-- -----------------------------------------------------
DROP TABLE IF EXISTS CLIENTES_PLUS_PRODUCTOS CASCADE;

CREATE TABLE IF NOT EXISTS CLIENTES_PLUS_PRODUCTOS (
          CODIGO_PEDIDO SERIAL,
          CLIENTES_PLUS_DNI INT NOT NULL,
          PRODUCTOS_Codigo_Producto INT NOT NULL,
          Cantidad INT NOT NULL,
          Fecha DATE NOT NULL,
          PRIMARY KEY (CODIGO_PEDIDO),
          CONSTRAINT fk_CLIENTES_PLUS_has_PRODUCTOS_CLIENTES_PLUS1
            FOREIGN KEY (CLIENTES_PLUS_DNI)
            REFERENCES CLIENTES_PLUS (DNI)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
          CONSTRAINT fk_CLIENTES_PLUS_has_PRODUCTOS_PRODUCTOS1
            FOREIGN KEY (PRODUCTOS_Codigo_Producto)
            REFERENCES PRODUCTOS (Codigo_Producto)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table prueba.ZONAS_PRODUCTOS
-- -----------------------------------------------------
DROP TABLE IF EXISTS ZONAS_PRODUCTOS CASCADE;

CREATE TABLE IF NOT EXISTS ZONAS_PRODUCTOS (
          --Coordenadas_Geograficas FLOAT NOT NULL,
          Nombre VARCHAR(45) NOT NULL,
          --Codigo_Producto INT NOT NULL,
          PRODUCTOS_Codigo_Producto INT NOT NULL,
          ZONAS_Coordenadas_Geograficas FLOAT NOT NULL,
          --PRIMARY KEY (Coordenadas_Geograficas),
          UNIQUE (Nombre),
          CONSTRAINT fk_ZONAS_PRODUCTOS_PRODUCTOS1
            FOREIGN KEY (PRODUCTOS_Codigo_Producto)
            REFERENCES PRODUCTOS (Codigo_Producto)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
          CONSTRAINT fk_ZONAS_PRODUCTOS_ZONAS1
            FOREIGN KEY (ZONAS_Coordenadas_Geograficas)
            REFERENCES ZONAS (Coordenadas_Geograficas)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table prueba.MUNICIPIO
-- -----------------------------------------------------
DROP TABLE IF EXISTS MUNICIPIO CASCADE;

CREATE TABLE IF NOT EXISTS MUNICIPIO (

            Código_postal INT NOT NULL,
            Nombre VARCHAR(45) NOT NULL,
            Superficie VARCHAR(45) NULL,
            VIVEROS_Coordenadas_Geograficas FLOAT NOT NULL,
            UNIQUE (Nombre),
            PRIMARY KEY (Código_postal, VIVEROS_Coordenadas_Geograficas),
          CONSTRAINT fk_MUNICIPIO_VIVEROS1
            FOREIGN KEY (VIVEROS_Coordenadas_Geograficas)
            REFERENCES VIVEROS (Coordenadas_Geograficas)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION);

-- ----------------------------------------------------
-- Table prueba.ZONAS_PRODUCTOS
-- -----------------------------------------------------

CREATE OR REPLACE FUNCTION crear_email() RETURNS trigger AS $trigger_crear_email_before_insert$
    BEGIN
        IF NEW.Nombre IS NULL THEN
            RAISE EXCEPTION 'Nombre no puede ser nulo';
        END IF;
        IF NEW.Apellidos IS NULL THEN
            RAISE EXCEPTION 'Apellidos no pueden ser nulo';
        END IF;

        IF (NEW.Email IS NULL OR NEW.Email = '') THEN
           NEW.Email := CONCAT(NEW.Nombre, NEW.Apellidos, '@', 'gmail.com');

        END IF;
        RETURN NEW;
    END;
$trigger_crear_email_before_insert$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION actualizar_stock_clientes() RETURNS trigger AS $trigger_actualizar_stock_clientes$
    BEGIN
        UPDATE PRODUCTOS SET
          Stock = Stock - NEW.Cantidad
          WHERE NEW.PRODUCTOS_Codigo_Producto = Codigo_Producto;

        RETURN NEW;
    END;
$trigger_actualizar_stock_clientes$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION actualizar_stock_productos() RETURNS trigger AS $trigger_actualizar_stock_productos$
    BEGIN
        IF EXISTS (SELECT * FROM PRODUCTOS WHERE NEW.Codigo_Producto = Codigo_Producto) THEN
          UPDATE PRODUCTOS SET
            Stock = Stock + NEW.Stock
            WHERE NEW.Codigo_Producto = Codigo_Producto;
            RAISE NOTICE 'Actualizando stock';
            RETURN NULL;
        END IF;
        RETURN NEW;
    END;
$trigger_actualizar_stock_productos$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_vacaciones() RETURNS trigger AS $trigger_verificar_vacaciones$
    BEGIN
        IF NEW.Vacaciones_anuales IS NULL THEN
            NEW.Vacaciones_anuales = 22;
        ELSIF NEW.Vacaciones_anuales > 60 THEN
          RAISE EXCEPTION 'Se han excedido los días de vacaciones';
        ELSIF NEW.Vacaciones_anuales < 0 THEN
          RAISE EXCEPTION 'Los días de vacaciones no pueden ser un valor negativo.';
        END IF;
        RETURN NEW;
    END;
$trigger_verificar_vacaciones$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION municipio_existe() RETURNS trigger AS $trigger_municipio_existe$
   -- BEGIN
   --     IF NEW.Código_postal IS NULL THEN
   --         RAISE EXCEPTION 'Inserte los datos';
   --     ELSIF 
   --           EXISTS (SELECT * FROM MUNICIPIO WHERE NEW.VIVEROS_Coordenadas_Geograficas = VIVEROS_Coordenadas_Geograficas) THEN
   --           RAISE EXCEPTION 'El municipio ya está registrado';
   --     END IF;
   --     RETURN NEW;
   -- END;

  BEGIN
	IF (NEW.Nombre = OLD.Nombre) THEN
		RAISE EXCEPTION 'El Municipio ya fue registrado con anterioridad';
	END IF;
	RETURN NEW;
  END;
	
$trigger_municipio_existe$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_crear_email_before_insert BEFORE INSERT ON CLIENTES_PLUS
FOR EACH ROW EXECUTE PROCEDURE crear_email();

CREATE TRIGGER trigger_actualizar_stock_clientes AFTER INSERT ON CLIENTES_PLUS_PRODUCTOS
FOR EACH ROW EXECUTE PROCEDURE actualizar_stock_clientes();

CREATE TRIGGER trigger_actualizar_stock_productos BEFORE INSERT ON PRODUCTOS
FOR EACH ROW EXECUTE PROCEDURE actualizar_stock_productos();

CREATE TRIGGER trigger_verificar_vacaciones BEFORE INSERT ON EMPLEADOS
FOR EACH ROW EXECUTE PROCEDURE verificar_vacaciones();

CREATE TRIGGER trigger_municipio_existe BEFORE INSERT ON MUNICIPIO
FOR EACH ROW EXECUTE PROCEDURE municipio_existe();

INSERT INTO EMPLEADOS(DNI,Nombre, Sueldo, Direccion, Vacaciones_anuales) VALUES (123456789, 'Sheyla', 60000, 'La Laguna', 22);

insert into CLIENTES_PLUS VALUES (790638369, 'Anabel', 'Diaz', 45753, 0.3, 123456789, 'anabel@diaz.es');
insert into CLIENTES_PLUS VALUES (790643556, 'Martin', 'Martin', 30000, 0.4, 123456789, NULL);
insert into CLIENTES_PLUS VALUES (788512343, 'Jaime', 'Pablo', 4000, 0.1, 123456789, '');
--insert into CLIENTES_PLUS VALUES (045647893, 'Saul', 'Becario', 10, 0.0, 123456789, 'saulorg');

insert into PRODUCTOS VALUES (0000, 'Lechuga', 1, 50);
insert into PRODUCTOS VALUES (0001, 'Tomates', 1, 70);

SELECT * FROM PRODUCTOS;

insert into CLIENTES_PLUS_PRODUCTOS (CLIENTES_PLUS_DNI,PRODUCTOS_Codigo_Producto,Cantidad,Fecha) VALUES (790638369, 0000, 10, '11-NOV-21');
--insert into CLIENTES_PLUS_PRODUCTOS (CLIENTES_PLUS_DNI,PRODUCTOS_Codigo_Producto,Cantidad,Fecha) VALUES (790638369, 0000, 50, '11-NOV-21');

SELECT * FROM PRODUCTOS;

insert into PRODUCTOS VALUES (0000, 'Lechuga', 1, 4000);

SELECT * FROM PRODUCTOS;

INSERT INTO EMPLEADOS VALUES (987654321, 'Manuel', 2000,'La Punta', 10);

INSERT INTO VIVEROS VALUES (32.3, 'Tenerife', 400000);
INSERT INTO VIVEROS VALUES (31.3, 'Tenerife', 20002);
INSERT INTO MUNICIPIO VALUES (37900, 'Candelaria', 24500, 31.3);
INSERT INTO MUNICIPIO VALUES (34567, 'Tacoronte', 3000, 32.3);
INSERT INTO MUNICIPIO VALUES (34222, 'Tacoronte', 5000, 213.2);
INSERT INTO ZONAS VALUES (32.3, 'Regadío');
INSERT INTO ZONAS_PRODUCTOS VALUES ('Regadío', 0000, 32.3);

SELECT * FROM CLIENTES_PLUS;
SELECT * FROM VIVEROS;
SELECT * FROM ZONAS;
SELECT * FROM CLIENTES_PLUS_PRODUCTOS;
SELECT * FROM ZONAS_PRODUCTOS;
SELECT * FROM MUNICIPIO;

